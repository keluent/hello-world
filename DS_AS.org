* OS
** 临界资源
   一次只能被一个进程使用的资源称为临界资源--临界区的本质是代码
** 同步
   进程之间存在工作次序，同步关系即是进程之间的制约关系。简单理解：A必须在B执行之后才能运行
   进程同步关系必须防止死锁的发生
   同步问题存在许多经典问题：
*** 生产者和消费者问题
*** 哲学家就餐问题
*** 读者-写者问题
** 互斥
   互斥也被称为间接制约关系。一个进程进入临界区后，其他进程必须等待，直到前一个进程退出临界区，才可进入临界区。如同公司只有一个坑位，小李占了坑之后，其他同事就不能占坑了，所以小李与同事互斥，坑就是临界资源。
   互斥机制遵循以下4个原则：
*** 空闲让进
    临界区空闲时，可以允许一个进程进入
*** 忙则等待
    临界区已有进程时，其他进程需要等待
*** 有限等待
    对请求访问的进程，不能让他们一直等待
*** 让权等待
    进程进入等待状态时，应该立即释放处理器，防止处理器资源被占用，进程忙等待
*** P V 原语
    
    P和V分别来自荷兰语Passeren和Verhoog，相当于英文的 pass(-) 和 increment(+)


    
P操作：

P(sem) {
sem = sem - 1;
if (sem < 0) {
    该进程状态置为等待状态
    讲进程的PCB插入相应的等待队列尾部
    sem.queue;
    }
}

V操作：
    
V(sem) {
sem = sem + 1;
if (sem < = 0) {
    唤醒相应等待队列 sem.queue 中的一个进程
    改变其状态为就绪状态
    将其插入就绪队列
    }
}

sem > 0,有sem个资源可用
sem = 0,无资源可用
sem < 0,|sem| 表示等待进程的数量

P(sem)：申请一个资源
V(sem)：释放一个资源

P V操作必须成对，有一个P就有一个V
当为互斥操作时，他们处于同一个进程
当为同步操作时，他们不在同一个进程

如果 P(sem) 和 P(sem) 两个操作在一起，那么P操作的顺序至关重要:
一个同步P操作与一个互斥P操作在一起时同步P操作在互斥P操作前而两个V操作无关紧要。

* DS
